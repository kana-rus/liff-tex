import type { NextPage } from 'next'
import Head from 'next/head'
import { ChangeEvent, useEffect, useState } from 'react'

import styles from '../styles/main.module.css'

import katex from 'katex'
import html2canvas from 'html2canvas'


const Home: NextPage = () => {

  //const [liffObject, setLiffObject] = useState<any>()
  const LiffID = process.env.LIFF_ID
  useEffect(() => {
    import('@line/liff').then((liff: any) => {
      liff
        .init({
          liffId: LiffID
        })
        .then(() => {
          if (!liff.isLoggedIn()) {
            liff.login({})
          }
          //setLiffObject(liff)

          /* trial ---
          liff.openWindow({
            url: "https://liff-tex.vercel.app/",
            external: true,
          })
          */

          // trial
          liff.sendMessages([
            {
              type: "text",
              text: "Messaging test",
            }
          ]).catch((err: any) => {
            console.log(err)
          })
          
        })
        .catch((err: any) => {
          console.error(err)
        })
    })
  }, [])




  const [katexFontSize, setKatexFontSize] = useState(1.6)

  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {
    const currentText = e.target.value
    const katexArea = document.getElementById("katex-area")!
    katex.render(String.raw`${currentText}`, katexArea!, {
      throwOnError: false,
      displayMode: true
    })

    const rate = katexArea.clientWidth / katexArea.scrollWidth
    const newKatexFontSize = katexFontSize * rate * rate
    setKatexFontSize(newKatexFontSize)
    document.documentElement.style.setProperty(
      '--katex-font-size', `${newKatexFontSize}em`
    )
  }

  const handleClick = () => {
    html2canvas(document.getElementById('katex-area')!).then(canvas => {
      const downloadLink = document.getElementsByTagName("a")[0]
      const dataURL = canvas.toDataURL()
      downloadLink.href = dataURL
      downloadLink.click()

      /*
      const downloadImage = document.getElementsByTagName('img')[0]
      downloadImage.src = dataURL
      */
    })
  }

  return (
    <>
      <Head>
        <title>LIFF-TEX</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.mainStyle}>
        <div className={styles.previewStyle} id="katex-area" />
        <textarea
          className={styles.inputStyle}
          onChange={(e) => handleChange(e)}
        />
        <button className={styles.buttonStyle}
          onClick={handleClick}
        >
          download
        </button>

        <a id='download-link' download='KaTeX.png' className={styles.linkStyle}>
          downloadLink
        </a>

      </main>
    </>
  )
}

export default Home
